/*
    Project 1b
    Author: Shaan Arora, C3236359
    Token Class
        Contains all functionality for the tokens generated by the lexical scanner
*/
import java.lang.String;
import java.util.*;

public class Token
{
    //Member variables for a Token object
    //Tokens enum for the label and ID of the token object
    //private tokenID to store the ID of the token object
    //private lexeme for the lexeme associated with integer literals,float/real literals,string literals, identifiers and undefined
    //private lineNo for which line the token object is located at
    //private colNo for which column the token object starts haven't decided if a column starts at 0 or 1
    //static final TPRINT string array for output

    enum Tokens
    {
        // Token value for end of file
        T_EOF(0),

        // The 30 keywords

        TCD20(1),	TCONS(2),	TTYPS(3),	TTTIS(4),	TARRS(5),	TMAIN(6),
        TBEGN(7),	TTEND(8),	TARAY(9),	TTTOF(10),	TFUNC(11),	TVOID(12),
        TCNST(13),	TINTG(14),	TREAL(15),	TBOOL(16),	TTFOR(17),	TREPT(18),
        TUNTL(19),	TIFTH(20),	TELSE(21),	TINPT(22),	TPRIN(23),	TPRLN(24),
        TRETN(25),	TNOTT(26),	TTAND(27),	TTTOR(28),	TTXOR(29),	TTRUE(30),
        TFALS(31),

        // the operators and delimiters
        TCOMA(32),	TLBRK(33),	TRBRK(34),	TLPAR(35),	TRPAR(36),
        TEQUL(37),	TPLUS(38),	TMINS(39),	TSTAR(40),	TDIVD(41),	TPERC(42),
        TCART(43),	TLESS(44),	TGRTR(45),	TCOLN(46),	TLEQL(47),	TGEQL(48),
        TNEQL(49),	TEQEQ(50),	TPLEQ(51),	TMNEQ(52),	TSTEQ(53),	TDVEQ(54),
        TSEMI(56),	TDOTT(57),

        // the tokens which need tuple values

        TIDEN(58),	TILIT(59),	TFLIT(60),	TSTRG(61),	TUNDF(62);

        //private id variable for the TokenID enum
        private final int id;
        //HashMap so we can map the integer to its corresponding enum
        //This allows us to get the enum from an integer and also the integer based on the enum
        private static final Map<Integer, Tokens> map = new HashMap<>();
        //Map each token ID number to its appropriate name/label
        //This will happen on loading time
        static
        {
            for (Tokens t : Tokens.values())
            {
                map.put(t.getID(), t);
            }
        }
        Tokens(int id)
        {
            this.id = id;
        }
        //Get the enum based on the id
        public static Tokens valueOf(int id)
        {
            return map.get(id);
        }
        //return the number ID of the token
        public int getID()
        {
            return this.id;
        }
    }

    private Tokens tokenID;
    private String lexeme;
    private int lineNo;
    private int colNo;
    //static because we want TPRINT for all object instances of Token
    //final because TPRINT is used for output formatting and we do not want it to change
    static final String[] TPRINT = {
            "T_EOF ",
            "TCD20 ",	"TCONS ",	"TTYPS ",	"TTTIS ",	"TARRS ",	"TMAIN ",
            "TBEGN ",	"TTEND ",	"TARAY ",	"TTTOF ",	"TFUNC ",	"TVOID ",
            "TCNST ",	"TINTG ",	"TREAL ",	"TBOOL ",	"TTFOR ",	"TREPT ",
            "TUNTL ",	"TIFTH ",	"TELSE ",	"TINPT ",	"TPRIN ",	"TPRLN ",
            "TRETN ",	"TNOTT ",	"TTAND ",	"TTTOR ",	"TTXOR ",	"TTRUE ",
            "TFALS ",	"TCOMA ",	"TLBRK ",	"TRBRK ",	"TLPAR ",	"TRPAR ",
            "TEQUL ",	"TPLUS ",	"TMINS ",	"TSTAR ",	"TDIVD ",	"TPERC ",
            "TCART ",	"TLESS ",	"TGRTR ",	"TCOLN ",	"TLEQL ",	"TGEQL ",
            "TNEQL ",	"TEQEQ ",	"TPLEQ ",	"TMNEQ ",	"TSTEQ ",	"TDVEQ ",
            "TSEMI ",	"TDOTT ",
            "TIDEN ",	"TILIT ",	"TFLIT ",	"TSTRG ",	"TUNDF "};

    //Default Constructor
    //Preconditions: i >= 0
    //Postconditions: private member variables set to default values
    public Token(int i)
    {
        this.tokenID = Tokens.valueOf(i);
        this.lexeme = "";
        this.lineNo = 0;
        this.colNo = 0;
    }

    //Parameter Constructor for all member variables
    //Preconditions: value of parameters are not null
    //Postconditions: values of private member variables set to the values of the parameters
    public Token(int i, String lex, int line, int col)
    {
        this.tokenID = Tokens.valueOf(i);
        this.lexeme = lex;
        this.lineNo = line;
        this.colNo = col;
    }

    //Setter for tokenName
    //Preconditions: name is not empty
    //Postconditions: tokenID of the current object is set to the value of i
    public void setTokenID(int i)
    {
        this.tokenID = Tokens.valueOf(i);
    }

    //Setter for lexeme
    //Preconditions: lex is not empty
    //Postconditions: lexeme of the current object is set to the value of lex
    public void setLexeme(String lex)
    {
        this.lexeme = lex;
    }

    //Setter for lineNo
    //Preconditions: line is >= 0
    //Postconditions: lineNo of the current object is set to the value of line
    public void setLineNo(int line)
    {
        this.lineNo = line;
    }

    //Setter for colNo
    //Preconditions: col >= 0
    //Postconditions: colNo of the current token object is set to the value of col
    public void setColNo(int col)
    {
        this.colNo = col;
    }

    //Getter for the ID number of the current token object
    //Preconditions: tokenID is not null
    //Postcondition: returns the ID number value of the current token object
    public int getTokenID()
    {
        return this.tokenID.getID();
    }

    //Getter for lexeme
    //Preconditions: none
    //Postconditions: return the lexeme value for the current token object
    public String getLexeme()
    {
        return this.lexeme;
    }

    //Getter for lineNo
    //Preconditions: none
    //Postconditions: return the value of lineNo for the current token object
    public int getLineNo()
    {
        return this.lineNo;
    }

    //Getter for colNo
    //Preconditions: none
    //Postconditions: return the value of colNo for the current token object
    public int getColNo()
    {
        return  this.colNo;
    }

    //Override to neatly format and output a token
    @Override
    public String toString()
    {
        //This is to fix indexing and out of bounds issues since 55 doesnt exist in the enum
        if(this.getTokenID() >= 56)
        {
            return "The token is " + TPRINT[this.getTokenID() - 1];
        }
        else
        {
            return "The token is " + TPRINT[this.getTokenID()];
        }
    }
}